import React, { useEffect, useRef, useState } from "react";
import Peer from "peerjs";

const App = () => {
  // State to store my peer ID (generated by PeerJS)
  const [peerId, setPeerId] = useState(null);

  // State to store the peer ID of the other user we want to call
  const [remotePeerId, setRemotePeerId] = useState("");

  // Reference to hold the PeerJS instance
  const peerInstance = useRef(null);

  // Video references for local and remote streams
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);

  useEffect(() => {
    // Create a new PeerJS instance
    const peer = new Peer();

    // When the peer connects and gets an ID from the server
    peer.on("open", (id) => {
      console.log("My peer ID is: " + id);
      setPeerId(id);
    });

    // When someone calls me
    peer.on("call", (call) => {
      // Ask for permission to access my camera + microphone
      navigator.mediaDevices
        .getUserMedia({ audio: true, video: true })
        .then((mediaStream) => {
          // Show my video on the screen
          if (localVideoRef.current) {
            localVideoRef.current.srcObject = mediaStream;
          }

          // Answer the incoming call with my stream
          call.answer(mediaStream);

          // When I receive the remote video stream, show it
          call.on("stream", (remoteStream) => {
            if (remoteVideoRef.current) {
              remoteVideoRef.current.srcObject = remoteStream;
            }
          });
        })
        .catch((err) => console.error("Failed to get local stream", err));
    });

    peerInstance.current = peer; // Save instance
  }, []);

  // Function to call another peer
  const call = (remotePeerIdValue) => {
    navigator.mediaDevices
      .getUserMedia({ audio: true, video: true })
      .then((mediaStream) => {
        // Show my video
        if (localVideoRef.current) {
          localVideoRef.current.srcObject = mediaStream;
        }

        // Call the other peer with my stream
        const call = peerInstance.current.call(remotePeerIdValue, mediaStream);

        // Show the remote stream when received
        call.on("stream", (remoteStream) => {
          if (remoteVideoRef.current) {
            remoteVideoRef.current.srcObject = remoteStream;
          }
        });
      })
      .catch((err) => console.error("Failed to get local stream", err));
  };

  return (
    <div className="min-h-screen bg-black text-white flex flex-col items-center justify-center font-sans">
      {/* Title */}
      <h1 className="text-3xl font-bold mb-6">âš¡ PeerJS Video Call</h1>

      {/* My Peer ID */}
      <div className="mb-4 p-3 bg-gray-900 border border-gray-700 rounded-lg">
        <p className="text-sm text-gray-400">Your ID:</p>
        <p className="text-lg font-mono">{peerId || "Loading..."}</p>
      </div>

      {/* Input to enter remote ID */}
      <div className="flex items-center gap-2 mb-6">
        <input
          type="text"
          placeholder="Enter remote peer ID"
          value={remotePeerId}
          onChange={(e) => setRemotePeerId(e.target.value)}
          className="px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500"
        />
        <button
          onClick={() => call(remotePeerId)}
          className="px-4 py-2 bg-white text-black rounded-lg font-semibold hover:bg-gray-300 transition"
        >
          Call
        </button>
      </div>

      {/* Video Containers */}
      <div className="flex gap-8">
        <div className="flex flex-col items-center">
          <h3 className="mb-2 text-gray-300">My Video</h3>
          <video
            ref={localVideoRef}
            autoPlay
            playsInline
            muted
            className="w-72 h-48 rounded-xl border border-gray-700 bg-gray-900"
          />
        </div>
        <div className="flex flex-col items-center">
          <h3 className="mb-2 text-gray-300">Remote Video</h3>
          <video
            ref={remoteVideoRef}
            autoPlay
            playsInline
            className="w-72 h-48 rounded-xl border border-gray-700 bg-gray-900"
          />
        </div>
      </div>
    </div>
  );
};

export default App;
